{"ast":null,"code":"var _jsxFileName = \"F:\\\\\\u540C\\u6D4E\\u5B9E\\u4E60\\\\cutting\\\\src\\\\components\\\\ContinuousPatterns\\\\ContinuousPatterns.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useCallback, useImperativeHandle, forwardRef, useState } from 'react';\nimport './ContinuousPatterns.css'; // 引入样式文件\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ContinuousPatterns = /*#__PURE__*/_s( /*#__PURE__*/forwardRef(_c = _s(({\n  sketchDataURL,\n  selectedColor,\n  connectionType,\n  currentStep,\n  onSave,\n  spacing,\n  setSpacing\n}, ref) => {\n  _s();\n  const canvasRef = useRef(null);\n  const [offsetX, setOffsetX] = useState(0); // 用于存储X轴偏移量的状态\n\n  // 用于设置 canvas 尺寸的函数\n  const setCanvasSize = useCallback(() => {\n    const canvas = canvasRef.current;\n    if (canvas && canvas.parentElement) {\n      const parentElement = canvas.parentElement;\n      // canvas.width = parentElement.offsetWidth;\n      // canvas.height = parentElement.offsetHeight;\n    }\n  }, []);\n\n  // 绘制图案到 canvas\n  const drawPattern = useCallback(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n\n    // 清除 canvas\n    clearCanvas();\n    // 设置 canvas 背景颜色\n    context.fillStyle = selectedColor; // 使用 selectedColor 作为背景颜色\n    context.fillRect(0, 0, canvas.width, canvas.height); // 填充整个 canvas\n\n    const img = new Image();\n    img.onload = () => {\n      const scaledWidth = img.width * 0.25 + spacing;\n      const scaledHeight = img.height * 0.25 + spacing;\n      const numTilesY = Math.ceil(canvas.height / scaledHeight);\n      const offsetMap = {\n        '平接': 0,\n        '跳接_按行1/4': 0.25,\n        '跳接_按行1/3': 1 / 3,\n        '跳接_按行1/2': 0.5,\n        '跳接_按行2/3': 2 / 3,\n        '跳接_按行3/4': 0.75\n      };\n      const jumpOffset = offsetMap[connectionType] || 0;\n      let currentOffsetX = 0;\n      for (let y = 0; y < numTilesY; y++) {\n        currentOffsetX = y * scaledWidth * jumpOffset % scaledWidth;\n        if (currentOffsetX > 0) {\n          context.drawImage(img, currentOffsetX - scaledWidth, y * scaledHeight, scaledWidth, scaledHeight);\n        }\n        for (let x = currentOffsetX - scaledWidth; x < canvas.width; x += scaledWidth) {\n          context.drawImage(img, x, y * scaledHeight, scaledWidth, scaledHeight);\n        }\n      }\n\n      // 更新 offsetX 状态以存储当前的 X 轴偏移量\n      setOffsetX(currentOffsetX);\n      handleSave();\n    };\n    img.src = sketchDataURL;\n  }, [sketchDataURL, connectionType, currentStep, selectedColor, setOffsetX, spacing]); // 添加 setOffsetX 作为依赖项\n\n  const handleSave = useCallback(() => {\n    const canvas = canvasRef.current;\n    if (canvas) {\n      const imageData = canvas.toDataURL(\"image/png\", 1, 300);\n      onSave(imageData); // 将图像数据传递给父组件\n    }\n  }, [onSave]);\n\n  // 防抖函数\n  const debounce = useCallback((func, wait) => {\n    let timeout;\n    return (...args) => {\n      clearTimeout(timeout);\n      timeout = setTimeout(() => {\n        func.apply(this, args);\n      }, wait);\n    };\n  }, []);\n  const clearCanvas = () => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const context = canvas.getContext('2d');\n    // 清除画布\n    context.clearRect(0, 0, canvas.width, canvas.height);\n  };\n  useEffect(() => {\n    clearCanvas(); // 清除画布\n\n    // 设置 canvas 尺寸\n    setCanvasSize();\n\n    // 绘制新的图案\n    drawPattern();\n\n    // 定义窗口大小调整时的处理函数，该函数使用防抖以减少执行次数\n    const handleResize = debounce(() => {\n      clearCanvas(); // 在设置新尺寸之前先清除画布\n      setCanvasSize();\n      drawPattern(); // 重新绘制图案\n    }, 250);\n\n    // 监听窗口大小调整事件\n    window.addEventListener('resize', handleResize);\n\n    // 清理函数\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, [debounce, setCanvasSize, drawPattern, sketchDataURL, selectedColor, connectionType, currentStep, spacing]); // 将spacing添加到依赖项数组中\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"continuous-patterns\",\n    style: {\n      backgroundColor: selectedColor\n    },\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      id: \"myCanvas\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 10\n  }, this);\n}, \"YvR96dPFYO2HRx0W4aUMhABTm2M=\")), \"YvR96dPFYO2HRx0W4aUMhABTm2M=\");\n_c2 = ContinuousPatterns;\nexport default ContinuousPatterns;\nvar _c, _c2;\n$RefreshReg$(_c, \"ContinuousPatterns$forwardRef\");\n$RefreshReg$(_c2, \"ContinuousPatterns\");","map":{"version":3,"names":["React","useRef","useEffect","useCallback","useImperativeHandle","forwardRef","useState","jsxDEV","_jsxDEV","ContinuousPatterns","_s","_c","sketchDataURL","selectedColor","connectionType","currentStep","onSave","spacing","setSpacing","ref","canvasRef","offsetX","setOffsetX","setCanvasSize","canvas","current","parentElement","drawPattern","context","getContext","clearCanvas","fillStyle","fillRect","width","height","img","Image","onload","scaledWidth","scaledHeight","numTilesY","Math","ceil","offsetMap","jumpOffset","currentOffsetX","y","drawImage","x","handleSave","src","imageData","toDataURL","debounce","func","wait","timeout","args","clearTimeout","setTimeout","apply","clearRect","handleResize","window","addEventListener","removeEventListener","className","style","backgroundColor","children","id","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["F:/同济实习/cutting/src/components/ContinuousPatterns/ContinuousPatterns.js"],"sourcesContent":["import React, {useRef, useEffect, useCallback, useImperativeHandle, forwardRef, useState} from 'react';\r\nimport './ContinuousPatterns.css'; // 引入样式文件\r\n\r\n\r\n\r\n\r\nconst ContinuousPatterns = forwardRef(({ sketchDataURL, selectedColor, connectionType, currentStep, onSave,spacing,setSpacing }, ref) => {\r\n    const canvasRef = useRef(null);\r\n    const [offsetX, setOffsetX] = useState(0); // 用于存储X轴偏移量的状态\r\n\r\n\r\n    // 用于设置 canvas 尺寸的函数\r\n    const setCanvasSize = useCallback(() => {\r\n        const canvas = canvasRef.current;\r\n        if (canvas && canvas.parentElement) {\r\n            const parentElement = canvas.parentElement;\r\n            // canvas.width = parentElement.offsetWidth;\r\n            // canvas.height = parentElement.offsetHeight;\r\n            \r\n        }\r\n    }, []);\r\n\r\n    // 绘制图案到 canvas\r\n    const drawPattern = useCallback(() => {\r\n        const canvas = canvasRef.current;\r\n        const context = canvas.getContext('2d');\r\n\r\n        // 清除 canvas\r\n        clearCanvas();\r\n        // 设置 canvas 背景颜色\r\n        context.fillStyle = selectedColor; // 使用 selectedColor 作为背景颜色\r\n        context.fillRect(0, 0, canvas.width, canvas.height); // 填充整个 canvas\r\n\r\n        const img = new Image();\r\n\r\n        img.onload = () => {\r\n            const scaledWidth = img.width * 0.25+spacing;\r\n            const scaledHeight = img.height * 0.25+spacing;\r\n            const numTilesY = Math.ceil(canvas.height / scaledHeight);\r\n            const offsetMap = {\r\n                '平接': 0,\r\n                '跳接_按行1/4': 0.25,\r\n                '跳接_按行1/3': 1 / 3,\r\n                '跳接_按行1/2': 0.5,\r\n                '跳接_按行2/3': 2 / 3,\r\n                '跳接_按行3/4': 0.75,\r\n            };\r\n            const jumpOffset = offsetMap[connectionType] || 0;\r\n\r\n            let currentOffsetX = 0;\r\n\r\n            for (let y = 0; y < numTilesY; y++) {\r\n                currentOffsetX = y * scaledWidth * jumpOffset % scaledWidth;\r\n\r\n                if (currentOffsetX > 0) {\r\n                    context.drawImage(img, currentOffsetX - scaledWidth, y * scaledHeight, scaledWidth, scaledHeight);\r\n                }\r\n\r\n                for (let x = currentOffsetX - scaledWidth; x < canvas.width; x += scaledWidth) {\r\n                    context.drawImage(img, x, y * scaledHeight, scaledWidth, scaledHeight);\r\n                }\r\n            }\r\n\r\n            // 更新 offsetX 状态以存储当前的 X 轴偏移量\r\n            setOffsetX(currentOffsetX);\r\n            handleSave();\r\n        };\r\n\r\n        img.src = sketchDataURL;\r\n    }, [sketchDataURL, connectionType, currentStep, selectedColor, setOffsetX,spacing]); // 添加 setOffsetX 作为依赖项\r\n\r\n    const handleSave = useCallback(() => {\r\n        const canvas = canvasRef.current;\r\n        if (canvas) {\r\n            const imageData = canvas.toDataURL(\"image/png\", 1, 300);\r\n            onSave(imageData); // 将图像数据传递给父组件\r\n        }\r\n    }, [onSave]);\r\n    \r\n    // 防抖函数\r\n    const debounce = useCallback((func, wait) => {\r\n        let timeout;\r\n        return (...args) => {\r\n            clearTimeout(timeout);\r\n            timeout = setTimeout(() => {\r\n                func.apply(this, args);\r\n            }, wait);\r\n        };\r\n    }, []);\r\n    const clearCanvas = () => {\r\n        const canvas = canvasRef.current;\r\n        if (!canvas) return;\r\n        const context = canvas.getContext('2d');\r\n        // 清除画布\r\n        context.clearRect(0, 0, canvas.width, canvas.height);\r\n    };\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        clearCanvas(); // 清除画布\r\n\r\n        // 设置 canvas 尺寸\r\n        setCanvasSize();\r\n\r\n        // 绘制新的图案\r\n        drawPattern();\r\n\r\n        // 定义窗口大小调整时的处理函数，该函数使用防抖以减少执行次数\r\n        const handleResize = debounce(() => {\r\n            clearCanvas(); // 在设置新尺寸之前先清除画布\r\n            setCanvasSize();\r\n            drawPattern(); // 重新绘制图案\r\n        }, 250);\r\n\r\n        // 监听窗口大小调整事件\r\n        window.addEventListener('resize', handleResize);\r\n\r\n        // 清理函数\r\n        return () => {\r\n            window.removeEventListener('resize', handleResize);\r\n        };\r\n    }, [debounce, setCanvasSize, drawPattern, sketchDataURL, selectedColor, connectionType, currentStep, spacing]); // 将spacing添加到依赖项数组中\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n         <div className=\"continuous-patterns\" style={{ backgroundColor: selectedColor }}>\r\n        <canvas ref={canvasRef} id=\"myCanvas\" />\r\n        {/*<button onClick={handleSave}>Save next</button>*/}\r\n        {/*<button onClick={saveCanvasAsImage}>Save as Image</button>*/}\r\n    </div>\r\n    );\r\n});\r\n\r\nexport default ContinuousPatterns;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}