{"ast":null,"code":"// import React, { useEffect, useRef, useState } from 'react';\n// import { fabric } from 'fabric';\n//\n// const FabricCanvas = () => {\n//     const canvasRef = useRef(null);\n//     const fabricCanvasRef = useRef(null);\n//     const [isDown, setIsDown] = useState(false);\n//     const [lastPosX, setLastPosX] = useState(null);\n//     const [lastPosY, setLastPosY] = useState(null);\n//\n//     useEffect(() => {\n//         fabricCanvasRef.current = new fabric.Canvas(canvasRef.current, {\n//             width: window.innerHeight * 0.6,\n//             height: window.innerHeight * 0.6,\n//             selection: true, // 开启默认选择框\n//             preserveObjectStacking: true, // 保持对象堆叠顺序\n//             interactive: true, // 启用对象交互性\n//         });\n//\n//         // 添加事件监听器\n//         const canvas = fabricCanvasRef.current;\n//         if (canvas) {\n//             canvas.on('mouse:down', handleMouseDown);\n//             canvas.on('mouse:move', handleMouseMove);\n//             canvas.on('mouse:up', handleMouseUp);\n//         }\n//\n//         return () => {\n//             // 移除事件监听器\n//             const canvas = fabricCanvasRef.current;\n//             if (canvas) {\n//                 canvas.off('mouse:down', handleMouseDown);\n//                 canvas.off('mouse:move', handleMouseMove);\n//                 canvas.off('mouse:up', handleMouseUp);\n//             }\n//         };\n//     }, []); // 空依赖数组意味着这个effect只会在组件挂载和卸载时运行\n//\n//     // 处理drop事件\n//     const handleDrop = (e) => {\n//         e.preventDefault();\n//         // 获取拖拽的数据\n//         const dragData = e.dataTransfer.getData('application/json');\n//         const { type, url } = JSON.parse(dragData);\n//\n//         // 如果是来自素材库的拖拽数据\n//         if (type === 'library') {\n//             // 创建fabric.Image对象\n//             fabric.Image.fromURL(\n//                 url,\n//                 img => {\n//                     // 设置图片为可选择和可缩放\n//                     img.set({\n//                         selectable: true,\n//                         hasControls: true, // 启用控制点\n//                         hasBorders: true, // 启用边框\n//                         hasRotatingPoint: true, // 启用旋转点\n//                         left: fabricCanvasRef.current.width / 2, // 将图像置于画布中心\n//                         top: fabricCanvasRef.current.height / 2,\n//                         originX: 'center', // 设置旋转和缩放的中心点\n//                         originY: 'center',\n//                         draggable: true\n//                     });\n// img.selectable=true;\n//                     // 缩放图片到原来的四分之一大小\n//                     img.scale(0.25);\n//\n//                     // 添加图片到画布\n//                     fabricCanvasRef.current.add(img);\n//                     fabricCanvasRef.current.setActiveObject(img); // 设置为活动对象\n//                     fabricCanvasRef.current.renderAll();\n//                     fabricCanvasRef.current.isEditing = true; // 设置画布为可编辑状态\n//                 },\n//                 { crossOrigin: 'anonymous' }\n//             ); // 允许跨域请求\n//         }\n//     };\n//\n//     // 处理鼠标按下事件\n//     const handleMouseDown = (e) => {\n//         const pointer = fabricCanvasRef.current.getPointer(e.e);\n//         const obj = fabricCanvasRef.current.findTarget(e.e);\n//\n//         if (obj) {\n//             setIsDown(true);\n//             setLastPosX(pointer.x - obj.left);\n//             setLastPosY(pointer.y - obj.top);\n//         }\n//     };\n//\n//     // 处理鼠标移动事件\n//     const handleMouseMove = (e) => {\n//         if (!isDown) return;\n//         const pointer = fabricCanvasRef.current.getPointer(e.e);\n//         const obj = fabricCanvasRef.current.findTarget(e.e);\n//\n//         if (obj) {\n//             obj.set({\n//                 left: pointer.x - lastPosX,\n//                 top: pointer.y - lastPosY\n//             });\n//             fabricCanvasRef.current.renderAll();\n//         }\n//     };\n//\n//     // 处理鼠标抬起事件\n//     const handleMouseUp = () => {\n//         setIsDown(false);\n//     };\n//\n//     // 处理dragover事件\n//     const handleDragOver = (e) => {\n//         e.preventDefault();\n//     };\n//\n//     return (\n//         <div\n//             onDragOver={handleDragOver}\n//             onDrop={handleDrop}\n//             style={{ border: '1px solid black', maxWidth: '60vh', maxHeight: '60vh', position: 'relative' }}\n//         >\n//             <canvas\n//                 ref={canvasRef}\n//                 width={512}\n//                 height={512}\n//                 style={{ width: '100%', height: '100%' }}\n//             ></canvas>\n//         </div>\n//     );\n// };\n//\n// export default FabricCanvas;\n\n// import React, { useEffect, useRef } from 'react';\n// import { fabric } from 'fabric';\n//\n// const FabricCanvas = () => {\n//     const canvasRef = useRef(null);\n//\n//     useEffect(() => {\n//         const canvas = new fabric.Canvas(canvasRef.current, {\n//             width: 600,\n//             height: 400,\n//             selection: false // 关闭默认选择框\n//         });\n//\n//         // 创建一个可交互的正方形\n//         const square = new fabric.Rect({\n//             left: 100,\n//             top: 100,\n//             fill: 'red',\n//             width: 100,\n//             height: 100,\n//             borderColor: 'black',\n//             cornerColor: 'black',\n//             cornerSize: 10,\n//             transparentCorners: false,\n//             selectable: true, // 允许选择\n//             hasControls: true, // 启用控制点\n//             hasBorders: true // 启用边框\n//         });\n//\n//         canvas.add(square); // 添加正方形到Canvas\n//\n//         return () => {\n//             canvas.dispose(); // 清理Canvas\n//         };\n//     }, []); // 空依赖数组意味着这个effect只会在组件挂载和卸载时运行\n//\n//     return (\n//         <canvas\n//             ref={canvasRef}\n//             style={{ border: '1px solid black' }}\n//         ></canvas>\n//     );\n// };\n//\n// export default FabricCanvas;\n//","map":{"version":3,"names":[],"sources":["F:/同济实习/cutting/src/components/SketchBox/remake.js"],"sourcesContent":["// import React, { useEffect, useRef, useState } from 'react';\r\n// import { fabric } from 'fabric';\r\n//\r\n// const FabricCanvas = () => {\r\n//     const canvasRef = useRef(null);\r\n//     const fabricCanvasRef = useRef(null);\r\n//     const [isDown, setIsDown] = useState(false);\r\n//     const [lastPosX, setLastPosX] = useState(null);\r\n//     const [lastPosY, setLastPosY] = useState(null);\r\n//\r\n//     useEffect(() => {\r\n//         fabricCanvasRef.current = new fabric.Canvas(canvasRef.current, {\r\n//             width: window.innerHeight * 0.6,\r\n//             height: window.innerHeight * 0.6,\r\n//             selection: true, // 开启默认选择框\r\n//             preserveObjectStacking: true, // 保持对象堆叠顺序\r\n//             interactive: true, // 启用对象交互性\r\n//         });\r\n//\r\n//         // 添加事件监听器\r\n//         const canvas = fabricCanvasRef.current;\r\n//         if (canvas) {\r\n//             canvas.on('mouse:down', handleMouseDown);\r\n//             canvas.on('mouse:move', handleMouseMove);\r\n//             canvas.on('mouse:up', handleMouseUp);\r\n//         }\r\n//\r\n//         return () => {\r\n//             // 移除事件监听器\r\n//             const canvas = fabricCanvasRef.current;\r\n//             if (canvas) {\r\n//                 canvas.off('mouse:down', handleMouseDown);\r\n//                 canvas.off('mouse:move', handleMouseMove);\r\n//                 canvas.off('mouse:up', handleMouseUp);\r\n//             }\r\n//         };\r\n//     }, []); // 空依赖数组意味着这个effect只会在组件挂载和卸载时运行\r\n//\r\n//     // 处理drop事件\r\n//     const handleDrop = (e) => {\r\n//         e.preventDefault();\r\n//         // 获取拖拽的数据\r\n//         const dragData = e.dataTransfer.getData('application/json');\r\n//         const { type, url } = JSON.parse(dragData);\r\n//\r\n//         // 如果是来自素材库的拖拽数据\r\n//         if (type === 'library') {\r\n//             // 创建fabric.Image对象\r\n//             fabric.Image.fromURL(\r\n//                 url,\r\n//                 img => {\r\n//                     // 设置图片为可选择和可缩放\r\n//                     img.set({\r\n//                         selectable: true,\r\n//                         hasControls: true, // 启用控制点\r\n//                         hasBorders: true, // 启用边框\r\n//                         hasRotatingPoint: true, // 启用旋转点\r\n//                         left: fabricCanvasRef.current.width / 2, // 将图像置于画布中心\r\n//                         top: fabricCanvasRef.current.height / 2,\r\n//                         originX: 'center', // 设置旋转和缩放的中心点\r\n//                         originY: 'center',\r\n//                         draggable: true\r\n//                     });\r\n// img.selectable=true;\r\n//                     // 缩放图片到原来的四分之一大小\r\n//                     img.scale(0.25);\r\n//\r\n//                     // 添加图片到画布\r\n//                     fabricCanvasRef.current.add(img);\r\n//                     fabricCanvasRef.current.setActiveObject(img); // 设置为活动对象\r\n//                     fabricCanvasRef.current.renderAll();\r\n//                     fabricCanvasRef.current.isEditing = true; // 设置画布为可编辑状态\r\n//                 },\r\n//                 { crossOrigin: 'anonymous' }\r\n//             ); // 允许跨域请求\r\n//         }\r\n//     };\r\n//\r\n//     // 处理鼠标按下事件\r\n//     const handleMouseDown = (e) => {\r\n//         const pointer = fabricCanvasRef.current.getPointer(e.e);\r\n//         const obj = fabricCanvasRef.current.findTarget(e.e);\r\n//\r\n//         if (obj) {\r\n//             setIsDown(true);\r\n//             setLastPosX(pointer.x - obj.left);\r\n//             setLastPosY(pointer.y - obj.top);\r\n//         }\r\n//     };\r\n//\r\n//     // 处理鼠标移动事件\r\n//     const handleMouseMove = (e) => {\r\n//         if (!isDown) return;\r\n//         const pointer = fabricCanvasRef.current.getPointer(e.e);\r\n//         const obj = fabricCanvasRef.current.findTarget(e.e);\r\n//\r\n//         if (obj) {\r\n//             obj.set({\r\n//                 left: pointer.x - lastPosX,\r\n//                 top: pointer.y - lastPosY\r\n//             });\r\n//             fabricCanvasRef.current.renderAll();\r\n//         }\r\n//     };\r\n//\r\n//     // 处理鼠标抬起事件\r\n//     const handleMouseUp = () => {\r\n//         setIsDown(false);\r\n//     };\r\n//\r\n//     // 处理dragover事件\r\n//     const handleDragOver = (e) => {\r\n//         e.preventDefault();\r\n//     };\r\n//\r\n//     return (\r\n//         <div\r\n//             onDragOver={handleDragOver}\r\n//             onDrop={handleDrop}\r\n//             style={{ border: '1px solid black', maxWidth: '60vh', maxHeight: '60vh', position: 'relative' }}\r\n//         >\r\n//             <canvas\r\n//                 ref={canvasRef}\r\n//                 width={512}\r\n//                 height={512}\r\n//                 style={{ width: '100%', height: '100%' }}\r\n//             ></canvas>\r\n//         </div>\r\n//     );\r\n// };\r\n//\r\n// export default FabricCanvas;\r\n\r\n// import React, { useEffect, useRef } from 'react';\r\n// import { fabric } from 'fabric';\r\n//\r\n// const FabricCanvas = () => {\r\n//     const canvasRef = useRef(null);\r\n//\r\n//     useEffect(() => {\r\n//         const canvas = new fabric.Canvas(canvasRef.current, {\r\n//             width: 600,\r\n//             height: 400,\r\n//             selection: false // 关闭默认选择框\r\n//         });\r\n//\r\n//         // 创建一个可交互的正方形\r\n//         const square = new fabric.Rect({\r\n//             left: 100,\r\n//             top: 100,\r\n//             fill: 'red',\r\n//             width: 100,\r\n//             height: 100,\r\n//             borderColor: 'black',\r\n//             cornerColor: 'black',\r\n//             cornerSize: 10,\r\n//             transparentCorners: false,\r\n//             selectable: true, // 允许选择\r\n//             hasControls: true, // 启用控制点\r\n//             hasBorders: true // 启用边框\r\n//         });\r\n//\r\n//         canvas.add(square); // 添加正方形到Canvas\r\n//\r\n//         return () => {\r\n//             canvas.dispose(); // 清理Canvas\r\n//         };\r\n//     }, []); // 空依赖数组意味着这个effect只会在组件挂载和卸载时运行\r\n//\r\n//     return (\r\n//         <canvas\r\n//             ref={canvasRef}\r\n//             style={{ border: '1px solid black' }}\r\n//         ></canvas>\r\n//     );\r\n// };\r\n//\r\n// export default FabricCanvas;\r\n//\r\n"],"mappings},"metadata":{},"sourceType":"module","externalDependencies":[]}