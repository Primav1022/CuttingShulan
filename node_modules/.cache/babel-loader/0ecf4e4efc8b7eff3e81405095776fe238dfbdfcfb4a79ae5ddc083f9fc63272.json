{"ast":null,"code":"var _jsxFileName = \"F:\\\\\\u540C\\u6D4E\\u5B9E\\u4E60\\\\cutting\\\\src\\\\components\\\\SketchBox\\\\remake.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useRef, useState } from 'react';\n// import { fabric } from 'fabric';\n//\n// const FabricCanvas = () => {\n//     const canvasRef = useRef(null);\n//     const fabricCanvasRef = useRef(null);\n//     const [isDown, setIsDown] = useState(false);\n//     const [lastPosX, setLastPosX] = useState(null);\n//     const [lastPosY, setLastPosY] = useState(null);\n//\n//     useEffect(() => {\n//         fabricCanvasRef.current = new fabric.Canvas(canvasRef.current, {\n//             width: window.innerHeight * 0.6,\n//             height: window.innerHeight * 0.6,\n//             selection: false, // 开启默认选择框\n//             preserveObjectStacking: true, // 保持对象堆叠顺序\n//             interactive: true, // 启用对象交互性\n//         });\n//\n//         // 添加事件监听器\n//         // const canvas = fabricCanvasRef.current;\n//         // if (canvas) {\n//         //     canvas.on('mouse:down', handleMouseDown);\n//         //     canvas.on('mouse:move', handleMouseMove);\n//         //     canvas.on('mouse:up', handleMouseUp);\n//         // }\n//\n//         // return () => {\n//         //     // 移除事件监听器\n//         //     const canvas = fabricCanvasRef.current;\n//         //     if (canvas) {\n//         //         canvas.off('mouse:down', handleMouseDown);\n//         //         canvas.off('mouse:move', handleMouseMove);\n//         //         canvas.off('mouse:up', handleMouseUp);\n//         //     }\n//         // };\n//     }, []); // 空依赖数组意味着这个effect只会在组件挂载和卸载时运行\n//\n//     // 处理drop事件\n//     // 处理drop事件\n//     const handleDrop = (e) => {\n//         e.preventDefault(); // 阻止默认行为\n//\n//         // 获取拖拽的数据\n//         const dragData = e.dataTransfer.getData('application/json');\n//         const { type, url } = JSON.parse(dragData);\n//\n//         // 如果是来自素材库的拖拽数据\n//         if (type === 'library') {\n//             // 创建fabric.Image对象\n//             fabric.Image.fromURL(\n//                 url,\n//                 (img) => {\n//                     img.set({\n//                         left: 100,\n//                         top: 100,\n//                         width: 200,\n//                         height: 150,\n//                         hasControls: true,\n//                         hasBorders: true,\n//                         cornerColor: 'black',\n//                         cornerSize: 10,\n//                         transparentCorners: false,\n//                         selectable: true,\n//                         originX: 'center',\n//                         originY: 'center',\n//                         lockRotation: false\n//                     });\n//\n//                     // 添加图片到画布\n//                     fabricCanvasRef.current.add(img);\n//                     fabricCanvasRef.current.setActiveObject(img); // 设置为活动对象\n//                     fabricCanvasRef.current.renderAll();\n//                 },\n//                 { crossOrigin: 'anonymous' }\n//             );\n//         }\n//     };\n//\n//\n//     // 处理鼠标按下事件\n//     const handleMouseDown = (e) => {\n//         const pointer = fabricCanvasRef.current.getPointer(e.e);\n//         const obj = fabricCanvasRef.current.findTarget(e.e);\n//\n//         if (obj) {\n//             setIsDown(true);\n//             setLastPosX(pointer.x - obj.left);\n//             setLastPosY(pointer.y - obj.top);\n//         }\n//     };\n//\n//     // 处理鼠标移动事件\n//     const handleMouseMove = (e) => {\n//         if (!isDown) return;\n//         const pointer = fabricCanvasRef.current.getPointer(e.e);\n//         const obj = fabricCanvasRef.current.findTarget(e.e);\n//\n//         if (obj) {\n//             obj.set({\n//                 left: pointer.x - lastPosX,\n//                 top: pointer.y - lastPosY\n//             });\n//             fabricCanvasRef.current.renderAll();\n//         }\n//     };\n//\n//     // 处理鼠标抬起事件\n//     const handleMouseUp = () => {\n//         setIsDown(false);\n//     };\n//     // 处理dragover事件\n//     const handleDragOver = (e) => {\n//         e.preventDefault();\n//     };\n//\n//\n//     return (\n//         <div\n//             onDrop={handleDrop}\n//             onDragOver={(e) => e.preventDefault()} // 阻止默认行为\n//             style={{ border: '1px solid black', maxWidth: '60vh', maxHeight: '60vh', position: 'relative' }}\n//         >\n//             <canvas\n//                 ref={canvasRef}\n//                 width={512}\n//                 height={512}\n//                 style={{ width: '100%', height: '100%' }}\n//             ></canvas>\n//         </div>\n//     );\n//\n// };\n//\n// export default FabricCanvas;\n//\n// // import React, { useEffect, useRef } from 'react';\n// // import { fabric } from 'fabric';\n// // import MyImage from '../../images/show1.png'; // 路径根据实际情况调整\n// //\n// // const FabricCanvas = () => {\n// //     const canvasRef = useRef(null);\n// //\n// //     useEffect(() => {\n// //         if (!canvasRef.current) return;\n// //\n// //         const canvas = new fabric.Canvas(canvasRef.current, {\n// //             width: 600,\n// //             height: 400,\n// //             selection: false\n// //         });\n// //\n// //         // 创建一个可交互的图片对象\n// //         fabric.Image.fromURL(\n// //             MyImage, // 使用引入的图片\n// //             (img) => {\n// //                 img.set({\n// //                     left: 100,\n// //                     top: 100,\n// //                     width: 200,\n// //                     height: 150,\n// //                     hasControls: true,\n// //                     hasBorders: true,\n// //                     cornerColor: 'black',\n// //                     cornerSize: 10,\n// //                     transparentCorners: false,\n// //                     selectable: true,\n// //                     originX: 'center',\n// //                     originY: 'center',\n// //                     lockRotation: false\n// //                 });\n// //                 canvas.add(img);\n// //             },\n// //             { crossOrigin: 'anonymous' }\n// //         );\n// //\n// //         return () => {\n// //             canvas.dispose();\n// //         };\n// //     }, [canvasRef]);\n// //\n// //     return (\n// //         <canvas\n// //             ref={canvasRef}\n// //             style={{ border: '1px solid black' }}\n// //         ></canvas>\n// //     );\n// // };\n// //\n// // export default FabricCanvas;\n// //\n// //\nimport React, { useRef, useEffect } from 'react';\nimport { fabric } from 'fabric';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FabricCanvas = () => {\n  _s();\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    const canvas = new fabric.Canvas(canvasRef.current, {\n      width: 800,\n      height: 600,\n      backgroundColor: '#f0f0f0'\n    });\n\n    // 拖放图片到画布上\n    canvasRef.current.addEventListener('dragover', e => {\n      e.preventDefault();\n    });\n    canvasRef.current.addEventListener('drop', e => {\n      e.preventDefault();\n      const file = e.dataTransfer.files[0];\n      const reader = new FileReader();\n      reader.onload = event => {\n        const imgObj = new fabric.Image.fromURL(event.target.result, img => {\n          img.set({\n            left: e.clientX - canvasRef.current.getBoundingClientRect().left,\n            top: e.clientY - canvasRef.current.getBoundingClientRect().top,\n            scaleX: 0.2,\n            // 缩放初始大小\n            scaleY: 0.2\n          });\n          canvas.add(img);\n        });\n      };\n      reader.readAsDataURL(file);\n    });\n\n    // 使得图片可拖动\n    canvas.on('object:moving', e => {\n      const obj = e.target;\n      // 如果图片超出画布范围，限制其拖动\n      if (obj.getBoundingRect().top < 0 || obj.getBoundingRect().left < 0 || obj.getBoundingRect().top + obj.getBoundingRect().height > canvas.height || obj.getBoundingRect().left + obj.getBoundingRect().width > canvas.width) {\n        obj.setCoords();\n      }\n    });\n\n    // 使得图片可缩放\n    canvas.on('object:scaling', e => {\n      const obj = e.target;\n      if (obj.scaleX < 0.2) {\n        obj.scaleX = 0.2;\n      }\n      if (obj.scaleY < 0.2) {\n        obj.scaleY = 0.2;\n      }\n    });\n\n    // 使得图片可旋转\n    canvas.on('object:rotating', e => {\n      const obj = e.target;\n      obj.setCoords();\n    });\n    return () => {\n      canvas.dispose();\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: canvasRef,\n    style: {\n      width: '800px',\n      height: '600px',\n      border: '1px solid #ccc'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 264,\n    columnNumber: 9\n  }, this);\n};\n_s(FabricCanvas, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = FabricCanvas;\nexport default FabricCanvas;\nvar _c;\n$RefreshReg$(_c, \"FabricCanvas\");","map":{"version":3,"names":["React","useRef","useEffect","fabric","jsxDEV","_jsxDEV","FabricCanvas","_s","canvasRef","canvas","Canvas","current","width","height","backgroundColor","addEventListener","e","preventDefault","file","dataTransfer","files","reader","FileReader","onload","event","imgObj","Image","fromURL","target","result","img","set","left","clientX","getBoundingClientRect","top","clientY","scaleX","scaleY","add","readAsDataURL","on","obj","getBoundingRect","setCoords","dispose","ref","style","border","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["F:/同济实习/cutting/src/components/SketchBox/remake.js"],"sourcesContent":["// import React, { useEffect, useRef, useState } from 'react';\r\n// import { fabric } from 'fabric';\r\n//\r\n// const FabricCanvas = () => {\r\n//     const canvasRef = useRef(null);\r\n//     const fabricCanvasRef = useRef(null);\r\n//     const [isDown, setIsDown] = useState(false);\r\n//     const [lastPosX, setLastPosX] = useState(null);\r\n//     const [lastPosY, setLastPosY] = useState(null);\r\n//\r\n//     useEffect(() => {\r\n//         fabricCanvasRef.current = new fabric.Canvas(canvasRef.current, {\r\n//             width: window.innerHeight * 0.6,\r\n//             height: window.innerHeight * 0.6,\r\n//             selection: false, // 开启默认选择框\r\n//             preserveObjectStacking: true, // 保持对象堆叠顺序\r\n//             interactive: true, // 启用对象交互性\r\n//         });\r\n//\r\n//         // 添加事件监听器\r\n//         // const canvas = fabricCanvasRef.current;\r\n//         // if (canvas) {\r\n//         //     canvas.on('mouse:down', handleMouseDown);\r\n//         //     canvas.on('mouse:move', handleMouseMove);\r\n//         //     canvas.on('mouse:up', handleMouseUp);\r\n//         // }\r\n//\r\n//         // return () => {\r\n//         //     // 移除事件监听器\r\n//         //     const canvas = fabricCanvasRef.current;\r\n//         //     if (canvas) {\r\n//         //         canvas.off('mouse:down', handleMouseDown);\r\n//         //         canvas.off('mouse:move', handleMouseMove);\r\n//         //         canvas.off('mouse:up', handleMouseUp);\r\n//         //     }\r\n//         // };\r\n//     }, []); // 空依赖数组意味着这个effect只会在组件挂载和卸载时运行\r\n//\r\n//     // 处理drop事件\r\n//     // 处理drop事件\r\n//     const handleDrop = (e) => {\r\n//         e.preventDefault(); // 阻止默认行为\r\n//\r\n//         // 获取拖拽的数据\r\n//         const dragData = e.dataTransfer.getData('application/json');\r\n//         const { type, url } = JSON.parse(dragData);\r\n//\r\n//         // 如果是来自素材库的拖拽数据\r\n//         if (type === 'library') {\r\n//             // 创建fabric.Image对象\r\n//             fabric.Image.fromURL(\r\n//                 url,\r\n//                 (img) => {\r\n//                     img.set({\r\n//                         left: 100,\r\n//                         top: 100,\r\n//                         width: 200,\r\n//                         height: 150,\r\n//                         hasControls: true,\r\n//                         hasBorders: true,\r\n//                         cornerColor: 'black',\r\n//                         cornerSize: 10,\r\n//                         transparentCorners: false,\r\n//                         selectable: true,\r\n//                         originX: 'center',\r\n//                         originY: 'center',\r\n//                         lockRotation: false\r\n//                     });\r\n//\r\n//                     // 添加图片到画布\r\n//                     fabricCanvasRef.current.add(img);\r\n//                     fabricCanvasRef.current.setActiveObject(img); // 设置为活动对象\r\n//                     fabricCanvasRef.current.renderAll();\r\n//                 },\r\n//                 { crossOrigin: 'anonymous' }\r\n//             );\r\n//         }\r\n//     };\r\n//\r\n//\r\n//     // 处理鼠标按下事件\r\n//     const handleMouseDown = (e) => {\r\n//         const pointer = fabricCanvasRef.current.getPointer(e.e);\r\n//         const obj = fabricCanvasRef.current.findTarget(e.e);\r\n//\r\n//         if (obj) {\r\n//             setIsDown(true);\r\n//             setLastPosX(pointer.x - obj.left);\r\n//             setLastPosY(pointer.y - obj.top);\r\n//         }\r\n//     };\r\n//\r\n//     // 处理鼠标移动事件\r\n//     const handleMouseMove = (e) => {\r\n//         if (!isDown) return;\r\n//         const pointer = fabricCanvasRef.current.getPointer(e.e);\r\n//         const obj = fabricCanvasRef.current.findTarget(e.e);\r\n//\r\n//         if (obj) {\r\n//             obj.set({\r\n//                 left: pointer.x - lastPosX,\r\n//                 top: pointer.y - lastPosY\r\n//             });\r\n//             fabricCanvasRef.current.renderAll();\r\n//         }\r\n//     };\r\n//\r\n//     // 处理鼠标抬起事件\r\n//     const handleMouseUp = () => {\r\n//         setIsDown(false);\r\n//     };\r\n//     // 处理dragover事件\r\n//     const handleDragOver = (e) => {\r\n//         e.preventDefault();\r\n//     };\r\n//\r\n//\r\n//     return (\r\n//         <div\r\n//             onDrop={handleDrop}\r\n//             onDragOver={(e) => e.preventDefault()} // 阻止默认行为\r\n//             style={{ border: '1px solid black', maxWidth: '60vh', maxHeight: '60vh', position: 'relative' }}\r\n//         >\r\n//             <canvas\r\n//                 ref={canvasRef}\r\n//                 width={512}\r\n//                 height={512}\r\n//                 style={{ width: '100%', height: '100%' }}\r\n//             ></canvas>\r\n//         </div>\r\n//     );\r\n//\r\n// };\r\n//\r\n// export default FabricCanvas;\r\n//\r\n// // import React, { useEffect, useRef } from 'react';\r\n// // import { fabric } from 'fabric';\r\n// // import MyImage from '../../images/show1.png'; // 路径根据实际情况调整\r\n// //\r\n// // const FabricCanvas = () => {\r\n// //     const canvasRef = useRef(null);\r\n// //\r\n// //     useEffect(() => {\r\n// //         if (!canvasRef.current) return;\r\n// //\r\n// //         const canvas = new fabric.Canvas(canvasRef.current, {\r\n// //             width: 600,\r\n// //             height: 400,\r\n// //             selection: false\r\n// //         });\r\n// //\r\n// //         // 创建一个可交互的图片对象\r\n// //         fabric.Image.fromURL(\r\n// //             MyImage, // 使用引入的图片\r\n// //             (img) => {\r\n// //                 img.set({\r\n// //                     left: 100,\r\n// //                     top: 100,\r\n// //                     width: 200,\r\n// //                     height: 150,\r\n// //                     hasControls: true,\r\n// //                     hasBorders: true,\r\n// //                     cornerColor: 'black',\r\n// //                     cornerSize: 10,\r\n// //                     transparentCorners: false,\r\n// //                     selectable: true,\r\n// //                     originX: 'center',\r\n// //                     originY: 'center',\r\n// //                     lockRotation: false\r\n// //                 });\r\n// //                 canvas.add(img);\r\n// //             },\r\n// //             { crossOrigin: 'anonymous' }\r\n// //         );\r\n// //\r\n// //         return () => {\r\n// //             canvas.dispose();\r\n// //         };\r\n// //     }, [canvasRef]);\r\n// //\r\n// //     return (\r\n// //         <canvas\r\n// //             ref={canvasRef}\r\n// //             style={{ border: '1px solid black' }}\r\n// //         ></canvas>\r\n// //     );\r\n// // };\r\n// //\r\n// // export default FabricCanvas;\r\n// //\r\n// //\r\nimport React, { useRef, useEffect } from 'react';\r\nimport { fabric } from 'fabric';\r\n\r\nconst FabricCanvas = () => {\r\n    const canvasRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        const canvas = new fabric.Canvas(canvasRef.current, {\r\n            width: 800,\r\n            height: 600,\r\n            backgroundColor: '#f0f0f0'\r\n        });\r\n\r\n        // 拖放图片到画布上\r\n        canvasRef.current.addEventListener('dragover', (e) => {\r\n            e.preventDefault();\r\n        });\r\n\r\n        canvasRef.current.addEventListener('drop', (e) => {\r\n            e.preventDefault();\r\n            const file = e.dataTransfer.files[0];\r\n            const reader = new FileReader();\r\n            reader.onload = (event) => {\r\n                const imgObj = new fabric.Image.fromURL(event.target.result, (img) => {\r\n                    img.set({\r\n                        left: e.clientX - canvasRef.current.getBoundingClientRect().left,\r\n                        top: e.clientY - canvasRef.current.getBoundingClientRect().top,\r\n                        scaleX: 0.2, // 缩放初始大小\r\n                        scaleY: 0.2\r\n                    });\r\n                    canvas.add(img);\r\n                });\r\n            };\r\n            reader.readAsDataURL(file);\r\n        });\r\n\r\n        // 使得图片可拖动\r\n        canvas.on('object:moving', (e) => {\r\n            const obj = e.target;\r\n            // 如果图片超出画布范围，限制其拖动\r\n            if (obj.getBoundingRect().top < 0 ||\r\n                obj.getBoundingRect().left < 0 ||\r\n                obj.getBoundingRect().top + obj.getBoundingRect().height > canvas.height ||\r\n                obj.getBoundingRect().left + obj.getBoundingRect().width > canvas.width) {\r\n                obj.setCoords();\r\n            }\r\n        });\r\n\r\n        // 使得图片可缩放\r\n        canvas.on('object:scaling', (e) => {\r\n            const obj = e.target;\r\n            if (obj.scaleX < 0.2) {\r\n                obj.scaleX = 0.2;\r\n            }\r\n            if (obj.scaleY < 0.2) {\r\n                obj.scaleY = 0.2;\r\n            }\r\n        });\r\n\r\n        // 使得图片可旋转\r\n        canvas.on('object:rotating', (e) => {\r\n            const obj = e.target;\r\n            obj.setCoords();\r\n        });\r\n\r\n        return () => {\r\n            canvas.dispose();\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <div\r\n            ref={canvasRef}\r\n            style={{ width: '800px', height: '600px', border: '1px solid #ccc' }}\r\n        ></div>\r\n    );\r\n};\r\n\r\nexport default FabricCanvas;\r\n"],"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}