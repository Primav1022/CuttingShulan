{"ast":null,"code":"var _jsxFileName = \"F:\\\\\\u540C\\u6D4E\\u5B9E\\u4E60\\\\cutting\\\\src\\\\components\\\\SketchBox\\\\remake.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useRef, useState } from 'react';\n// import { fabric } from 'fabric';\n//\n// const FabricCanvas = () => {\n//     const canvasRef = useRef(null);\n//     const fabricCanvasRef = useRef(null);\n//     const [isDown, setIsDown] = useState(false);\n//     const [lastPosX, setLastPosX] = useState(null);\n//     const [lastPosY, setLastPosY] = useState(null);\n//\n//     useEffect(() => {\n//         fabricCanvasRef.current = new fabric.Canvas(canvasRef.current, {\n//             width: window.innerHeight * 0.6,\n//             height: window.innerHeight * 0.6,\n//             selection: true, // 开启默认选择框\n//             preserveObjectStacking: true, // 保持对象堆叠顺序\n//             interactive: true, // 启用对象交互性\n//         });\n//\n//         // 添加事件监听器\n//         const canvas = fabricCanvasRef.current;\n//         if (canvas) {\n//             canvas.on('mouse:down', handleMouseDown);\n//             canvas.on('mouse:move', handleMouseMove);\n//             canvas.on('mouse:up', handleMouseUp);\n//         }\n//\n//         return () => {\n//             // 移除事件监听器\n//             const canvas = fabricCanvasRef.current;\n//             if (canvas) {\n//                 canvas.off('mouse:down', handleMouseDown);\n//                 canvas.off('mouse:move', handleMouseMove);\n//                 canvas.off('mouse:up', handleMouseUp);\n//             }\n//         };\n//     }, []); // 空依赖数组意味着这个effect只会在组件挂载和卸载时运行\n//\n//     // 处理drop事件\n//     const handleDrop = (e) => {\n//         e.preventDefault();\n//         // 获取拖拽的数据\n//         const dragData = e.dataTransfer.getData('application/json');\n//         const { type, url } = JSON.parse(dragData);\n//\n//         // 如果是来自素材库的拖拽数据\n//         if (type === 'library') {\n//             console.log(url)\n//             // 创建fabric.Image对象\n//             fabric.Image.fromURL(\n//                 url,\n//                 img => {\n//                     // 设置图片为可选择和可缩放\n//                     img.set({\n//                         selectable: true,\n//                         hasControls: true, // 启用控制点\n//                         hasBorders: true, // 启用边框\n//                         hasRotatingPoint: true, // 启用旋转点\n//                         left: fabricCanvasRef.current.width / 2, // 将图像置于画布中心\n//                         top: fabricCanvasRef.current.height / 2,\n//                         originX: 'center', // 设置旋转和缩放的中心点\n//                         originY: 'center',\n//                         draggable: true\n//                     });\n// img.selectable=true;\n//                     // 缩放图片到原来的四分之一大小\n//                     img.scale(0.25);\n//\n//                     // 添加图片到画布\n//                     fabricCanvasRef.current.add(img);\n//                     fabricCanvasRef.current.setActiveObject(img); // 设置为活动对象\n//                     fabricCanvasRef.current.renderAll();\n//                     fabricCanvasRef.current.isEditing = true; // 设置画布为可编辑状态\n//                 },\n//                 { crossOrigin: 'anonymous' }\n//             ); // 允许跨域请求\n//         }\n//     };\n//\n//     // 处理鼠标按下事件\n//     const handleMouseDown = (e) => {\n//         const pointer = fabricCanvasRef.current.getPointer(e.e);\n//         const obj = fabricCanvasRef.current.findTarget(e.e);\n//\n//         if (obj) {\n//             setIsDown(true);\n//             setLastPosX(pointer.x - obj.left);\n//             setLastPosY(pointer.y - obj.top);\n//         }\n//     };\n//\n//     // 处理鼠标移动事件\n//     const handleMouseMove = (e) => {\n//         if (!isDown) return;\n//         const pointer = fabricCanvasRef.current.getPointer(e.e);\n//         const obj = fabricCanvasRef.current.findTarget(e.e);\n//\n//         if (obj) {\n//             obj.set({\n//                 left: pointer.x - lastPosX,\n//                 top: pointer.y - lastPosY\n//             });\n//             fabricCanvasRef.current.renderAll();\n//         }\n//     };\n//\n//     // 处理鼠标抬起事件\n//     const handleMouseUp = () => {\n//         setIsDown(false);\n//     };\n//\n//     // 处理dragover事件\n//     const handleDragOver = (e) => {\n//         e.preventDefault();\n//     };\n//\n//     return (\n//         <div\n//             onDragOver={handleDragOver}\n//             onDrop={handleDrop}\n//             style={{ border: '1px solid black', maxWidth: '60vh', maxHeight: '60vh', position: 'relative' }}\n//         >\n//             <canvas\n//                 ref={canvasRef}\n//                 width={512}\n//                 height={512}\n//                 style={{ width: '100%', height: '100%' }}\n//             ></canvas>\n//         </div>\n//     );\n// };\n//\n// export default FabricCanvas;\n//\n// import React, { useEffect, useRef } from 'react';\n// import { fabric } from 'fabric';\n// import MyImage from '../../images/show1.png'; // 路径根据实际情况调整\n//\n// const FabricCanvas = () => {\n//     const canvasRef = useRef(null);\n//\n//     useEffect(() => {\n//         if (!canvasRef.current) return;\n//\n//         const canvas = new fabric.Canvas(canvasRef.current, {\n//             width: 600,\n//             height: 400,\n//             selection: false\n//         });\n//\n//         // 创建一个可交互的图片对象\n//         fabric.Image.fromURL(\n//             MyImage, // 使用引入的图片\n//             (img) => {\n//                 img.set({\n//                     left: 100,\n//                     top: 100,\n//                     width: 200,\n//                     height: 150,\n//                     hasControls: true,\n//                     hasBorders: true,\n//                     cornerColor: 'black',\n//                     cornerSize: 10,\n//                     transparentCorners: false,\n//                     selectable: true,\n//                     originX: 'center',\n//                     originY: 'center',\n//                     lockRotation: false\n//                 });\n//                 canvas.add(img);\n//             },\n//             { crossOrigin: 'anonymous' }\n//         );\n//\n//         return () => {\n//             canvas.dispose();\n//         };\n//     }, [canvasRef]);\n//\n//     return (\n//         <canvas\n//             ref={canvasRef}\n//             style={{ border: '1px solid black' }}\n//         ></canvas>\n//     );\n// };\n//\n// export default FabricCanvas;\nimport React, { useEffect, useRef } from 'react';\nimport { fabric } from 'fabric';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FabricCanvas = ({\n  targets,\n  setTargets\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    if (!canvasRef.current) return;\n    const canvas = new fabric.Canvas(canvasRef.current, {\n      width: 600,\n      height: 400,\n      selection: false\n    });\n\n    // 添加已存在的targets到canvas\n    targets.forEach(target => {\n      addImageToCanvas(target);\n    });\n\n    // 监听targets的变化\n    return () => {\n      canvas.dispose();\n    };\n  }, [canvasRef, targets]);\n\n  // 将图片添加到canvas中\n  const addImageToCanvas = target => {\n    fabric.Image.fromURL(target.src, img => {\n      img.set({\n        left: target.x,\n        top: target.y,\n        width: target.width,\n        height: target.height,\n        angle: target.rotate,\n        hasControls: true,\n        hasBorders: true,\n        cornerColor: 'black',\n        cornerSize: 10,\n        transparentCorners: false,\n        selectable: true,\n        originX: 'center',\n        originY: 'center',\n        lockRotation: false\n      });\n      canvas.add(img);\n    }, {\n      crossOrigin: 'anonymous'\n    });\n  };\n  const handleDragOver = e => {\n    e.preventDefault();\n  };\n  const handleDrop = e => {\n    e.preventDefault();\n    const dragData = e.dataTransfer.getData('application/json');\n    const {\n      type,\n      url\n    } = JSON.parse(dragData);\n    if (type === 'library') {\n      // 新添加的图片对象\n      const newTarget = {\n        src: url,\n        x: 100,\n        y: 100,\n        width: 200,\n        height: 150,\n        rotate: 0\n      };\n      setTargets([...targets, newTarget]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onDragOver: handleDragOver,\n    onDrop: handleDrop,\n    style: {\n      border: '1px solid black',\n      position: 'relative'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: 600,\n      height: 400,\n      style: {\n        width: '100%',\n        height: '100%'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 259,\n    columnNumber: 9\n  }, this);\n};\n_s(FabricCanvas, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = FabricCanvas;\nexport default FabricCanvas;\nvar _c;\n$RefreshReg$(_c, \"FabricCanvas\");","map":{"version":3,"names":["React","useEffect","useRef","fabric","jsxDEV","_jsxDEV","FabricCanvas","targets","setTargets","_s","canvasRef","current","canvas","Canvas","width","height","selection","forEach","target","addImageToCanvas","dispose","Image","fromURL","src","img","set","left","x","top","y","angle","rotate","hasControls","hasBorders","cornerColor","cornerSize","transparentCorners","selectable","originX","originY","lockRotation","add","crossOrigin","handleDragOver","e","preventDefault","handleDrop","dragData","dataTransfer","getData","type","url","JSON","parse","newTarget","onDragOver","onDrop","style","border","position","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["F:/同济实习/cutting/src/components/SketchBox/remake.js"],"sourcesContent":["// import React, { useEffect, useRef, useState } from 'react';\r\n// import { fabric } from 'fabric';\r\n//\r\n// const FabricCanvas = () => {\r\n//     const canvasRef = useRef(null);\r\n//     const fabricCanvasRef = useRef(null);\r\n//     const [isDown, setIsDown] = useState(false);\r\n//     const [lastPosX, setLastPosX] = useState(null);\r\n//     const [lastPosY, setLastPosY] = useState(null);\r\n//\r\n//     useEffect(() => {\r\n//         fabricCanvasRef.current = new fabric.Canvas(canvasRef.current, {\r\n//             width: window.innerHeight * 0.6,\r\n//             height: window.innerHeight * 0.6,\r\n//             selection: true, // 开启默认选择框\r\n//             preserveObjectStacking: true, // 保持对象堆叠顺序\r\n//             interactive: true, // 启用对象交互性\r\n//         });\r\n//\r\n//         // 添加事件监听器\r\n//         const canvas = fabricCanvasRef.current;\r\n//         if (canvas) {\r\n//             canvas.on('mouse:down', handleMouseDown);\r\n//             canvas.on('mouse:move', handleMouseMove);\r\n//             canvas.on('mouse:up', handleMouseUp);\r\n//         }\r\n//\r\n//         return () => {\r\n//             // 移除事件监听器\r\n//             const canvas = fabricCanvasRef.current;\r\n//             if (canvas) {\r\n//                 canvas.off('mouse:down', handleMouseDown);\r\n//                 canvas.off('mouse:move', handleMouseMove);\r\n//                 canvas.off('mouse:up', handleMouseUp);\r\n//             }\r\n//         };\r\n//     }, []); // 空依赖数组意味着这个effect只会在组件挂载和卸载时运行\r\n//\r\n//     // 处理drop事件\r\n//     const handleDrop = (e) => {\r\n//         e.preventDefault();\r\n//         // 获取拖拽的数据\r\n//         const dragData = e.dataTransfer.getData('application/json');\r\n//         const { type, url } = JSON.parse(dragData);\r\n//\r\n//         // 如果是来自素材库的拖拽数据\r\n//         if (type === 'library') {\r\n//             console.log(url)\r\n//             // 创建fabric.Image对象\r\n//             fabric.Image.fromURL(\r\n//                 url,\r\n//                 img => {\r\n//                     // 设置图片为可选择和可缩放\r\n//                     img.set({\r\n//                         selectable: true,\r\n//                         hasControls: true, // 启用控制点\r\n//                         hasBorders: true, // 启用边框\r\n//                         hasRotatingPoint: true, // 启用旋转点\r\n//                         left: fabricCanvasRef.current.width / 2, // 将图像置于画布中心\r\n//                         top: fabricCanvasRef.current.height / 2,\r\n//                         originX: 'center', // 设置旋转和缩放的中心点\r\n//                         originY: 'center',\r\n//                         draggable: true\r\n//                     });\r\n// img.selectable=true;\r\n//                     // 缩放图片到原来的四分之一大小\r\n//                     img.scale(0.25);\r\n//\r\n//                     // 添加图片到画布\r\n//                     fabricCanvasRef.current.add(img);\r\n//                     fabricCanvasRef.current.setActiveObject(img); // 设置为活动对象\r\n//                     fabricCanvasRef.current.renderAll();\r\n//                     fabricCanvasRef.current.isEditing = true; // 设置画布为可编辑状态\r\n//                 },\r\n//                 { crossOrigin: 'anonymous' }\r\n//             ); // 允许跨域请求\r\n//         }\r\n//     };\r\n//\r\n//     // 处理鼠标按下事件\r\n//     const handleMouseDown = (e) => {\r\n//         const pointer = fabricCanvasRef.current.getPointer(e.e);\r\n//         const obj = fabricCanvasRef.current.findTarget(e.e);\r\n//\r\n//         if (obj) {\r\n//             setIsDown(true);\r\n//             setLastPosX(pointer.x - obj.left);\r\n//             setLastPosY(pointer.y - obj.top);\r\n//         }\r\n//     };\r\n//\r\n//     // 处理鼠标移动事件\r\n//     const handleMouseMove = (e) => {\r\n//         if (!isDown) return;\r\n//         const pointer = fabricCanvasRef.current.getPointer(e.e);\r\n//         const obj = fabricCanvasRef.current.findTarget(e.e);\r\n//\r\n//         if (obj) {\r\n//             obj.set({\r\n//                 left: pointer.x - lastPosX,\r\n//                 top: pointer.y - lastPosY\r\n//             });\r\n//             fabricCanvasRef.current.renderAll();\r\n//         }\r\n//     };\r\n//\r\n//     // 处理鼠标抬起事件\r\n//     const handleMouseUp = () => {\r\n//         setIsDown(false);\r\n//     };\r\n//\r\n//     // 处理dragover事件\r\n//     const handleDragOver = (e) => {\r\n//         e.preventDefault();\r\n//     };\r\n//\r\n//     return (\r\n//         <div\r\n//             onDragOver={handleDragOver}\r\n//             onDrop={handleDrop}\r\n//             style={{ border: '1px solid black', maxWidth: '60vh', maxHeight: '60vh', position: 'relative' }}\r\n//         >\r\n//             <canvas\r\n//                 ref={canvasRef}\r\n//                 width={512}\r\n//                 height={512}\r\n//                 style={{ width: '100%', height: '100%' }}\r\n//             ></canvas>\r\n//         </div>\r\n//     );\r\n// };\r\n//\r\n// export default FabricCanvas;\r\n//\r\n// import React, { useEffect, useRef } from 'react';\r\n// import { fabric } from 'fabric';\r\n// import MyImage from '../../images/show1.png'; // 路径根据实际情况调整\r\n//\r\n// const FabricCanvas = () => {\r\n//     const canvasRef = useRef(null);\r\n//\r\n//     useEffect(() => {\r\n//         if (!canvasRef.current) return;\r\n//\r\n//         const canvas = new fabric.Canvas(canvasRef.current, {\r\n//             width: 600,\r\n//             height: 400,\r\n//             selection: false\r\n//         });\r\n//\r\n//         // 创建一个可交互的图片对象\r\n//         fabric.Image.fromURL(\r\n//             MyImage, // 使用引入的图片\r\n//             (img) => {\r\n//                 img.set({\r\n//                     left: 100,\r\n//                     top: 100,\r\n//                     width: 200,\r\n//                     height: 150,\r\n//                     hasControls: true,\r\n//                     hasBorders: true,\r\n//                     cornerColor: 'black',\r\n//                     cornerSize: 10,\r\n//                     transparentCorners: false,\r\n//                     selectable: true,\r\n//                     originX: 'center',\r\n//                     originY: 'center',\r\n//                     lockRotation: false\r\n//                 });\r\n//                 canvas.add(img);\r\n//             },\r\n//             { crossOrigin: 'anonymous' }\r\n//         );\r\n//\r\n//         return () => {\r\n//             canvas.dispose();\r\n//         };\r\n//     }, [canvasRef]);\r\n//\r\n//     return (\r\n//         <canvas\r\n//             ref={canvasRef}\r\n//             style={{ border: '1px solid black' }}\r\n//         ></canvas>\r\n//     );\r\n// };\r\n//\r\n// export default FabricCanvas;\r\nimport React, { useEffect, useRef } from 'react';\r\nimport { fabric } from 'fabric';\r\n\r\nconst FabricCanvas = ({ targets, setTargets }) => {\r\n    const canvasRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        if (!canvasRef.current) return;\r\n\r\n        const canvas = new fabric.Canvas(canvasRef.current, {\r\n            width: 600,\r\n            height: 400,\r\n            selection: false\r\n        });\r\n\r\n        // 添加已存在的targets到canvas\r\n        targets.forEach(target => {\r\n            addImageToCanvas(target);\r\n        });\r\n\r\n        // 监听targets的变化\r\n        return () => {\r\n            canvas.dispose();\r\n        };\r\n    }, [canvasRef, targets]);\r\n\r\n    // 将图片添加到canvas中\r\n    const addImageToCanvas = (target) => {\r\n        fabric.Image.fromURL(\r\n            target.src,\r\n            (img) => {\r\n                img.set({\r\n                    left: target.x,\r\n                    top: target.y,\r\n                    width: target.width,\r\n                    height: target.height,\r\n                    angle: target.rotate,\r\n                    hasControls: true,\r\n                    hasBorders: true,\r\n                    cornerColor: 'black',\r\n                    cornerSize: 10,\r\n                    transparentCorners: false,\r\n                    selectable: true,\r\n                    originX: 'center',\r\n                    originY: 'center',\r\n                    lockRotation: false\r\n                });\r\n                canvas.add(img);\r\n            },\r\n            { crossOrigin: 'anonymous' }\r\n        );\r\n    };\r\n\r\n    const handleDragOver = (e) => {\r\n        e.preventDefault();\r\n    };\r\n\r\n    const handleDrop = (e) => {\r\n        e.preventDefault();\r\n        const dragData = e.dataTransfer.getData('application/json');\r\n        const { type, url } = JSON.parse(dragData);\r\n\r\n        if (type === 'library') {\r\n            // 新添加的图片对象\r\n            const newTarget = { src: url, x: 100, y: 100, width: 200, height: 150, rotate: 0 };\r\n            setTargets([...targets, newTarget]);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div\r\n            onDragOver={handleDragOver}\r\n            onDrop={handleDrop}\r\n            style={{ border: '1px solid black', position: 'relative' }}\r\n        >\r\n            <canvas\r\n                ref={canvasRef}\r\n                width={600}\r\n                height={400}\r\n                style={{ width: '100%', height: '100%' }}\r\n            ></canvas>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FabricCanvas;\r\n\r\n"],"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}