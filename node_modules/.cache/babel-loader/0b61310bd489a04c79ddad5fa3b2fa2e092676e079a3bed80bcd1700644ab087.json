{"ast":null,"code":"var _jsxFileName = \"F:\\\\\\u540C\\u6D4E\\u5B9E\\u4E60\\\\cutting\\\\src\\\\components\\\\SketchBox\\\\remake.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { fabric } from 'fabric';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FabricCanvas = () => {\n  _s();\n  const canvasRef = useRef(null);\n  const [img, setImg] = useState(null); // 使用状态来存储img对象\n\n  useEffect(() => {\n    const fabricCanvas = new fabric.Canvas(canvasRef.current, {\n      width: window.innerHeight * 0.6,\n      height: window.innerHeight * 0.6,\n      selection: true,\n      // 允许选择对象\n      preserveObjectStacking: true // 保持对象堆叠顺序\n    });\n\n    // 添加事件监听器\n    canvasRef.current.addEventListener('dragover', handleDragOver);\n    canvasRef.current.addEventListener('drop', handleDrop);\n\n    // 如果img存在，添加到画布\n    if (img) {\n      fabricCanvas.add(img);\n      fabricCanvas.setActiveObject(img);\n      fabricCanvas.requestRenderAll();\n    }\n    return () => {\n      // 移除事件监听器\n      canvasRef.current.removeEventListener('dragover', handleDragOver);\n      canvasRef.current.removeEventListener('drop', handleDrop);\n    };\n  }, [img]); // 将img作为依赖项\n\n  // 处理dragover事件\n  const handleDragOver = e => {\n    e.preventDefault();\n  };\n\n  // 处理drop事件\n  const handleDrop = e => {\n    e.preventDefault();\n\n    // 获取拖拽的数据\n    const dragData = e.dataTransfer.getData('application/json');\n    const {\n      type,\n      url\n    } = JSON.parse(dragData);\n\n    // 如果是来自素材库的拖拽数据\n    if (type === 'library') {\n      // 创建fabric.Image对象\n      fabric.Image.fromURL(url, newImg => {\n        // 设置图片为可选择和可缩放\n        newImg.set({\n          selectable: true,\n          scalable: true,\n          fill: 'rgba(0, 0, 0, 0.1)' // 设置一个不透明的填充颜色\n        });\n\n        // 缩放图片到原来的四分之一大小\n        newImg.scale(0.25);\n\n        // 设置图片位置为画布的原点\n        newImg.setCoords();\n\n        // 更新状态\n        setImg(newImg);\n      }, {\n        crossOrigin: 'anonymous'\n      }); // 允许跨域请求\n    }\n  };\n\n  // 处理删除对象\n  const handleDeleteObject = () => {\n    if (img) {\n      fabricCanvasRef.current.remove(img);\n      fabricCanvasRef.current.requestRenderAll(); // 重新渲染画布\n      setImg(null); // 清空img状态\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onDragOver: handleDragOver,\n    onDrop: handleDrop,\n    style: {\n      border: '1px solid black',\n      maxWidth: '60vh',\n      maxHeight: '60vh',\n      position: 'relative'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: 512,\n      height: 512,\n      style: {\n        width: '100%',\n        height: '100%'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleDeleteObject,\n      style: {\n        position: 'absolute',\n        top: '10px',\n        right: '10px'\n      },\n      children: \"Delete Object\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 9\n  }, this);\n};\n_s(FabricCanvas, \"R+WpvVdJklacDUlBT6Dw6mS1Pbw=\");\n_c = FabricCanvas;\nexport default FabricCanvas;\nvar _c;\n$RefreshReg$(_c, \"FabricCanvas\");","map":{"version":3,"names":["React","useEffect","useRef","useState","fabric","jsxDEV","_jsxDEV","FabricCanvas","_s","canvasRef","img","setImg","fabricCanvas","Canvas","current","width","window","innerHeight","height","selection","preserveObjectStacking","addEventListener","handleDragOver","handleDrop","add","setActiveObject","requestRenderAll","removeEventListener","e","preventDefault","dragData","dataTransfer","getData","type","url","JSON","parse","Image","fromURL","newImg","set","selectable","scalable","fill","scale","setCoords","crossOrigin","handleDeleteObject","fabricCanvasRef","remove","onDragOver","onDrop","style","border","maxWidth","maxHeight","position","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","onClick","top","right","_c","$RefreshReg$"],"sources":["F:/同济实习/cutting/src/components/SketchBox/remake.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport { fabric } from 'fabric';\r\n\r\nconst FabricCanvas = () => {\r\n    const canvasRef = useRef(null);\r\n    const [img, setImg] = useState(null); // 使用状态来存储img对象\r\n\r\n    useEffect(() => {\r\n        const fabricCanvas = new fabric.Canvas(canvasRef.current, {\r\n            width: window.innerHeight * 0.6,\r\n            height: window.innerHeight * 0.6,\r\n            selection: true, // 允许选择对象\r\n            preserveObjectStacking: true, // 保持对象堆叠顺序\r\n        });\r\n\r\n        // 添加事件监听器\r\n        canvasRef.current.addEventListener('dragover', handleDragOver);\r\n        canvasRef.current.addEventListener('drop', handleDrop);\r\n\r\n        // 如果img存在，添加到画布\r\n        if (img) {\r\n            fabricCanvas.add(img);\r\n            fabricCanvas.setActiveObject(img);\r\n            fabricCanvas.requestRenderAll();\r\n        }\r\n\r\n        return () => {\r\n            // 移除事件监听器\r\n            canvasRef.current.removeEventListener('dragover', handleDragOver);\r\n            canvasRef.current.removeEventListener('drop', handleDrop);\r\n        };\r\n    }, [img]); // 将img作为依赖项\r\n\r\n    // 处理dragover事件\r\n    const handleDragOver = (e) => {\r\n        e.preventDefault();\r\n    };\r\n\r\n    // 处理drop事件\r\n    const handleDrop = (e) => {\r\n        e.preventDefault();\r\n\r\n        // 获取拖拽的数据\r\n        const dragData = e.dataTransfer.getData('application/json');\r\n        const { type, url } = JSON.parse(dragData);\r\n\r\n        // 如果是来自素材库的拖拽数据\r\n        if (type === 'library') {\r\n            // 创建fabric.Image对象\r\n            fabric.Image.fromURL(url, (newImg) => {\r\n                // 设置图片为可选择和可缩放\r\n                newImg.set({\r\n                    selectable: true,\r\n                    scalable: true,\r\n                    fill: 'rgba(0, 0, 0, 0.1)', // 设置一个不透明的填充颜色\r\n                });\r\n\r\n                // 缩放图片到原来的四分之一大小\r\n                newImg.scale(0.25);\r\n\r\n                // 设置图片位置为画布的原点\r\n                newImg.setCoords();\r\n\r\n                // 更新状态\r\n                setImg(newImg);\r\n            }, { crossOrigin: 'anonymous' }); // 允许跨域请求\r\n        }\r\n    };\r\n\r\n    // 处理删除对象\r\n    const handleDeleteObject = () => {\r\n        if (img) {\r\n            fabricCanvasRef.current.remove(img);\r\n            fabricCanvasRef.current.requestRenderAll(); // 重新渲染画布\r\n            setImg(null); // 清空img状态\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div\r\n            onDragOver={handleDragOver}\r\n            onDrop={handleDrop}\r\n            style={{ border: '1px solid black', maxWidth: '60vh', maxHeight: '60vh', position: 'relative' }}\r\n        >\r\n            <canvas\r\n                ref={canvasRef}\r\n                width={512}\r\n                height={512}\r\n                style={{ width: '100%', height: '100%' }}\r\n            ></canvas>\r\n            <button onClick={handleDeleteObject} style={{ position: 'absolute', top: '10px', right: '10px' }}>Delete Object</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FabricCanvas;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}